import { createSlice } from '@reduxjs/toolkit'
import type { PayloadAction } from '@reduxjs/toolkit'
import type { RootState } from './store'
import { ProductType } from '../types';

// Define a type for the slice state
interface CartState {
  cart: ProductType[];
}

// Define the initial state using that type
const initialState: CartState = {
  cart: [],
};

// Manages the cart state and actions
export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    // Add an item to the cart
    addToCart: (state, action: PayloadAction<ProductType>) => {
      state.cart.push(action.payload);
    },
    // Remove an item from the cart by its ID
    removeFromCart: (state, action: PayloadAction<number>) => {
      state.cart = state.cart.filter(item => item.id !== action.payload);
    },
    // Clear all items from the cart
    clearCart: (state) => {
      state.cart = [];
    }
  },
});

// Export the action creators generated by createSlice
export const { addToCart, removeFromCart, clearCart } = cartSlice.actions;

// Other code such as selectors can use the imported `RootState` type
export const selectCart = (state: RootState) => state.cart.cart;

// Export the reducer function generated by createSlice
export default cartSlice.reducer